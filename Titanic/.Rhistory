getwd()
install.packages("swirl")
install.packages("swirl")
library(swirl)
library("swirl")
a<-numeric(10)
a
typeof(a)
help(ditributions)
help("Distributions")
help("Normal")
install.packages("swirl")
installed.packages("rtweet")
install.packages("rtweet")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("devtools")
install.packages("openssl")
apt-get install libssl-dev/unstable
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("RSelenium")
install.packages("XML")
install.packages("wdman")
install.packages("RCurl")
install.packages("urltools")
install.packages("stringr")
install.packages("parsedate")
install.packages("lubridate")
install.packages("rvest")
install.packages("SnowballC")
install.packages("mongolite")
R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'
install.packages("e1071")
install.packages("mongolite")
install.packages("httr","/usr/local/lib/R/site-library")
install.packages("RSelenium","/usr/local/lib/R/site-library")
install.packages("wdman","/usr/local/lib/R/site-library")
install.packages("binman","/usr/local/lib/R/site-library")
install.packages("xml2","/usr/local/lib/R/site-library")
install.packages("XML","/usr/local/lib/R/site-library")
install.packages("rtweet","/usr/local/lib/R/site-library")
install.packages("rtweet","/usr/local/lib/R/site-library")
install.packages("lubridate")
install.packages("rvest")
install.packages("xml2")
install.packages("xml2")
install.packages("urltools")
install.packages("stringr")
install.packages("parsedate")
install.packages("SnowballC")
install.packages("mongolite")
install.packages("properties")
install.packages("Rserve")
install.packages("jsonlite")
install.packages("qdap")
setwd("/home/mukesh/Desktop/Kaggle/DigitRecogniser/")
install.packages("readr")
train <- read.csv("train.csv")
test <-  read.csv("test.csv")
head(train)
head(train[1:10])
m = matrix(unlist(train[10,-1], nrow = 28, byrow = TRUE))
image(m,col = grey.colors(255))
m = matrix(unlist(train[10,-1], nrow = 28, byrow = T))
image(m, col = grey.colors(255))
m = matrix(unlist(train[10,-1]), nrow = 28, byrow = T)
image(m, col = grey.colors(255))
m = matrix(unlist(train[10,-1]), nrow = 28, byrow = TRUE)
image(m, col = grey.colors(255))
m = matrix(unlist(train[10,-1]), nrow = 28, byrow = T)
image(m, col = grey.colors(255))
m = matrix(unlist(train[10,-1]), nrow = 28, byrow = T)
image(m, col = grey.colors(255))
m = matrix(unlist(train[10,-1]), nrow = 28, byrow = T)
image(m, col = grey.colors(255))
unlist(train[10,-1])
unlist(train[10,-1])
m = matrix(unlist(train[10,-1]), nrow = 28, byrow = T)
dim(m)
str(train)
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow = c(2,3))
lapply(1:6,
function(x) image (
rotate(matrix(unlist(train[x, -1]),nrow = 28,byrow = T)),
col = grey.colors(255),
xlab = train[x, 1]
)
)
install.packages("h2o")
install.packages("h2o")
install.packages("h2o")
localH2O = h2o.init(max_mem_size = '6g', nthreads = -1)
library("h2o")
localH2O = h2o.init(max_mem_size = '6g', nthreads = -1)
train[, 1] = as.factor(train[, 1])
train_h2o = as.h2o(train)
test_h2o = as.h2o(test)
s <- proc.time()
model = h2o.deeplearning(x = 2:785,
y = 1,
training_frame = train_h2o,
activation = "RectifierWithDropout",
input_dropout_ratio = 0.2,
hidden_dropout_ratios = c(0.5,0.5),
balance_classes = TRUE,
hidden = c(100,100),
momentum_stable = 0.99,
nesterov_accelerated_gradient = T,
epochs = 15)
h2o.confusionMatrix(model)
s - proc.time()
h2o_y_test <- h2o.predict(model, test_h2o)
df_y_test = as.data.frame(h2o_y_test)
df_y_test = data.frame(ImageId = seq(1,length(df_y_test$predict)),
Label = df_y_test$predict)
write.csv(df_y_test, file = "DataRecognizer.csv",row.names = F)
h2o.shutdown(prompt = F)
setwd("/home/mukesh/Documents/Kaggle/Titanic/")
train <- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
str(train)
tail(train)
test <- read.csv(file = "test.csv", stringsAsFactors = FALSE, header = TRUE)
head(test)
train$IsTrainSet <- TRUE
test$Survived <- NA
data <- rbind(train, test)
train$IsTrainSet <- TRUE
test$IsTrainSet <- FALSE
test$Survived <- NA
data <- rbind(train, test)
data[data$Embarked == '', 'Embarked'] <- 'S'
table(is.na(data$Age))
age.median <- median(data$Age, na.rm = TRUE)
data[is.na(data$Age), "Age"] <- age.median
boxplot(data$Fare)
boxplot.stats(data$Fare)
boxplot.stats(data$Fare)$stats
upper.whisker <- boxplot.stats(data$Fare)$stats[5]
outlier.filter <- data$Fare < upper.whisker
fare.expr = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model <- lm(formula = fare.expr, data = data[outlier.filter,])
fare.row <- data[is.na(data$Fare), c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
fare.prediction <- predict(fare.model, newdata = fare.row)
fare.row <- data[is.na(data$Fare), c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
# Titanic: Machine Learning from Disaster
train <- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
str(train)
head(train)
tail(train)
test <- read.csv(file = "test.csv", stringsAsFactors = FALSE, header = TRUE)
str(test)
head(test)
tail(test)
train$IsTrainSet <- TRUE
test$IsTrainSet <- FALSE
test$Survived <- NA
data <- rbind(train, test)
data[data$Embarked == '', 'Embarked'] <- 'S'
table(is.na(data$Age))
# Clean missing values of age
age.median <- median(data$Age, na.rm = TRUE)
data[is.na(data$Age), "Age"] <- age.median
# Clean missing values of fare
# Fare medians are commented to improve the accurcy of the linear regression model
# fare.median <- median(data$Fare, na.rm = TRUE)
# data[is.na(data$Fare), "Fare"] <- fare.median
boxplot(data$Fare)
boxplot.stats(data$Fare)
boxplot.stats(data$Fare)$stats
upper.whisker <- boxplot.stats(data$Fare)$stats[5]
outlier.filter <- data$Fare < upper.whisker
# Linear Regression Model to improve the accuracy.
fare.expr = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model <- lm(formula = fare.expr, data = data[outlier.filter,])
fare.row <- data[is.na(data$Fare), c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
fare.prediction <- predict(fare.model, newdata = fare.row)
data[is.na(data$Fare,"Fare")] <- fare.prediction
# Categorical casting
data$Pclass <- as.factor(data$Pclass)
data$Sex <- as.factor(data$Sex)
data$Embarked <- as.factor(data$Embarked)
# Split dataset back out into train and test
train <- data[data$IsTrainSet == TRUE,]
test <- data[data$IsTrainSet == FALSE,]
train$Survived <- as.factor(train$Survived)
survived.expr <- "Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived.formula <- as.formula(survived.expr)
# Simple Classsification Model
#install.packages("randomForest")
library(randomForest)
titanic.model <- randomForest(formula = Survived.formula, data = train, ntree = 500, mtry = 3, nodesize = 0.01 * nrow(test))
features.equation <- "Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived <- predict(model, newdata = test)
Survived
PassengerId <- test$PassengerId
output.df <- as.data.frame(PassengerId)
output.df$Survived <- Survived
tail(output.df)
# Write output data in the file
write.csv(output.df, file = "Titanic_Sub.csv", row.names = FALSE)
# Titanic: Machine Learning from Disaster
train <- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
str(train)
head(train)
tail(train)
test <- read.csv(file = "test.csv", stringsAsFactors = FALSE, header = TRUE)
str(test)
head(test)
tail(test)
train$IsTrainSet <- TRUE
test$IsTrainSet <- FALSE
test$Survived <- NA
data <- rbind(train, test)
data[data$Embarked == '', 'Embarked'] <- 'S'
table(is.na(data$Age))
# Clean missing values of age
age.median <- median(data$Age, na.rm = TRUE)
data[is.na(data$Age), "Age"] <- age.median
# Clean missing values of fare
# Fare medians are commented to improve the accurcy of the linear regression model
# fare.median <- median(data$Fare, na.rm = TRUE)
# data[is.na(data$Fare), "Fare"] <- fare.median
boxplot(data$Fare)
boxplot.stats(data$Fare)
boxplot.stats(data$Fare)$stats
upper.whisker <- boxplot.stats(data$Fare)$stats[5]
outlier.filter <- data$Fare < upper.whisker
# Linear Regression Model to improve the accuracy.
fare.expr = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model <- lm(formula = fare.expr, data = data[outlier.filter,])
fare.row <- data[is.na(data$Fare), c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
fare.prediction <- predict(fare.model, newdata = fare.row)
data[is.na(data$Fare,"Fare")] <- fare.prediction
# Categorical casting
data$Pclass <- as.factor(data$Pclass)
data$Sex <- as.factor(data$Sex)
data$Embarked <- as.factor(data$Embarked)
# Split dataset back out into train and test
train <- data[data$IsTrainSet == TRUE,]
test <- data[data$IsTrainSet == FALSE,]
train$Survived <- as.factor(train$Survived)
survived.expr <- "Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived.formula <- as.formula(survived.expr)
# Simple Classsification Model
#install.packages("randomForest")
library(randomForest)
titanic.model <- randomForest(formula = Survived.formula, data = train, ntree = 500, mtry = 3, nodesize = 0.01 * nrow(test))
features.equation <- "Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived <- predict(model, newdata = test)
Survived
PassengerId <- test$PassengerId
output.df <- as.data.frame(PassengerId)
output.df$Survived <- Survived
tail(output.df)
# Write output data in the file
write.csv(output.df, file = "Titanic_Sub.csv", row.names = FALSE)
# Titanic: Machine Learning from Disaster
titanic.train <- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.train)
head(titanic.train)
tail(titanic.train)
titanic.test <- read.csv(file = "test.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.test)
head(titanic.test)
tail(titanic.test)
titanic.train$IsTrainSet <- TRUE
titanic.test$IsTrainSet <- FALSE
titanic.test$Survived <- NA
titanic.full <- rbind(titanic.train, titanic.test)
titanic.full[titanic.full$Embarked == '', 'Embarked'] <- 'S'
table(is.na(titanic.full$Age))
# Clean missing values of age
age.median <- median(titanic.full$Age, na.rm = TRUE)
titanic.full[is.na(titanic.full$Age), "Age"] <- age.median
# Clean missing values of fare
# Fare medians are commented to improve the accurcy of the linear regression model
# fare.median <- median(titanic.full$Fare, na.rm = TRUE)
# titanic.full[is.na(titanic.full$Fare), "Fare"] <- fare.median
boxplot(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)$stats
upper.whisker <- boxplot.stats(titanic.full$Fare)$stats[5]
outlier.filter <- titanic.full$Fare < upper.whisker
# Linear Regression Model to improve the accuracy.
fare.eqation = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model <- lm(formula = fare.eqation, data = titanic.full[outlier.filter,])
fare.row <- titanic.full[is.na(titanic.full$Fare), c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
fare.prediction <- predict(fare.model, newdata = fare.row)
titanic.full[is.na(titanic.full$Fare,"Fare")] <- fare.prediction
# Categorical casting
titanic.full$Pclass <- as.factor(titanic.full$Pclass)
titanic.full$Sex <- as.factor(titanic.full$Sex)
titanic.full$Embarked <- as.factor(titanic.full$Embarked)
# Split dataset back out into train and test
titanic.train <- titanic.full[titanic.full$IsTrainSet == TRUE,]
titanic.test <- titanic.full[titanic.full$IsTrainSet == FALSE,]
titanic.train$Survived <- as.factor(titanic.train$Survived)
survived.equation <- "Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived.formula <- as.formula(survived.equation)
# Simple Classsification Model
#install.packages("randomForest")
library(randomForest)
titanic.model <- randomForest(formula = Survived.formula, data = titanic.train, ntree = 500, mtry = 3, nodesize = 0.01 * nrow(titanic.test))
features.equation <- "Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived <- predict(titanic.model, newdata = titanic.test)
Survived
PassengerId <- titanic.test$PassengerId
output.df <- as.data.frame(PassengerId)
output.df$Survived <- Survived
tail(output.df)
# Write output data in the file
write.csv(output.df, file = "Titanic_Sub.csv", row.names = FALSE)
titanic.train <- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.train)
head(titanic.train)
tail(titanic.train)
titanic.test <- read.csv(file = "test.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.test)
head(titanic.test)
tail(titanic.test)
titanic.train$IsTrainSet <- TRUE
titanic.test$IsTrainSet <- FALSE
titanic.test$Survived <- NA
titanic.full <- rbind(titanic.train, titanic.test)
titanic.full[titanic.full$Embarked == '', 'Embarked'] <- 'S'
table(is.na(titanic.full$Age))
age.median <- median(titanic.full$Age, na.rm = TRUE)
titanic.full[is.na(titanic.full$Age), "Age"] <- age.median
# Clean missing values of fare
# Fare medians are commented to improve the accurcy of the linear regression model
# fare.median <- median(titanic.full$Fare, na.rm = TRUE)
# titanic.full[is.na(titanic.full$Fare), "Fare"] <- fare.median
boxplot(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)$stats
upper.whisker <- boxplot.stats(titanic.full$Fare)$stats[5]
outlier.filter <- titanic.full$Fare < upper.whisker
fare.eqation = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model <- lm(formula = fare.eqation, data = titanic.full[outlier.filter,])
fare.row <- titanic.full[is.na(titanic.full$Fare), c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
fare.prediction <- predict(fare.model, newdata = fare.row)
titanic.full[is.na(titanic.full$Fare,"Fare")] <- fare.prediction
fare.row <- titanic.full[is.na(titanic.full$Fare), c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
# Titanic: Machine Learning from Disaster
titanic.train <- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.train)
head(titanic.train)
tail(titanic.train)
titanic.test <- read.csv(file = "test.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.test)
head(titanic.test)
tail(titanic.test)
titanic.train$IsTrainSet <- TRUE
titanic.test$IsTrainSet <- FALSE
titanic.test$Survived <- NA
titanic.full <- rbind(titanic.train, titanic.test)
titanic.full[titanic.full$Embarked == '', 'Embarked'] <- 'S'
table(is.na(titanic.full$Age))
# Clean missing values of age
age.median <- median(titanic.full$Age, na.rm = TRUE)
titanic.full[is.na(titanic.full$Age), "Age"] <- age.median
# Clean missing values of fare
# Fare medians are commented to improve the accurcy of the linear regression model
# fare.median <- median(titanic.full$Fare, na.rm = TRUE)
# titanic.full[is.na(titanic.full$Fare), "Fare"] <- fare.median
boxplot(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)$stats
upper.whisker <- boxplot.stats(titanic.full$Fare)$stats[5]
outlier.filter <- titanic.full$Fare < upper.whisker
fare.eqation = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model <- lm(formula = fare.eqation, data = titanic.full[outlier.filter,])
fare.row <- titanic.full[is.na(titanic.full$Fare), c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
fare.model <- lm(formula = fare.eqation, data = titanic.full[outlier.filter,])
fare.row <- titanic.full[c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
is.na(titanic.full$Fare)
titanic.full[is.na(titanic.full$Fare)]
titanic.full <- rbind(titanic.train, titanic.test)
str(titanic.full)
fare.eqation = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model <- lm(formula = fare.eqation, data = titanic.full[outlier.filter,])
titanic.full[is.na(titanic.full$Fare)]
titanic.full$Fare
data1 <- is.na(titanic.full$Fare)
titanic.full[is.na(titanic.full$Fare)]
# Titanic: Machine Learning from Disaster
titanic.train <- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.train)
head(titanic.train)
tail(titanic.train)
titanic.test <- read.csv(file = "test.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.test)
head(titanic.test)
tail(titanic.test)
titanic.train$IsTrainSet <- TRUE
titanic.test$IsTrainSet <- FALSE
titanic.test$Survived <- NA
titanic.full <- rbind(titanic.train, titanic.test)
str(titanic.full)
titanic.full[titanic.full$Embarked == '', 'Embarked'] <- 'S'
table(is.na(titanic.full$Age))
# Clean missing values of age
age.median <- median(titanic.full$Age, na.rm = TRUE)
titanic.full[is.na(titanic.full$Age), "Age"] <- age.median
# Clean missing values of fare
# Fare medians are commented to improve the accurcy of the linear regression model
# fare.median <- median(titanic.full$Fare, na.rm = TRUE)
# titanic.full[is.na(titanic.full$Fare), "Fare"] <- fare.median
boxplot(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)$stats
upper.whisker <- boxplot.stats(titanic.full$Fare)$stats[5]
outlier.filter <- titanic.full$Fare < upper.whisker
# Linear Regression Model to improve the accuracy.
fare.eqation = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model <- lm(formula = fare.eqation, data = titanic.full[outlier.filter,])
titanic.full$Fare
data1 <- is.na(titanic.full$Fare)
titanic.full[is.na(titanic.full$Fare)]
# Titanic: Machine Learning from Disaster
titanic.train <- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.train)
head(titanic.train)
tail(titanic.train)
titanic.test <- read.csv(file = "test.csv", stringsAsFactors = FALSE, header = TRUE)
str(titanic.test)
head(titanic.test)
tail(titanic.test)
titanic.train$IsTrainSet <- TRUE
titanic.test$IsTrainSet <- FALSE
titanic.test$Survived <- NA
titanic.full <- rbind(titanic.train, titanic.test)
str(titanic.full)
titanic.full[titanic.full$Embarked == '', 'Embarked'] <- 'S'
table(is.na(titanic.full$Age))
# Clean missing values of age
age.median <- median(titanic.full$Age, na.rm = TRUE)
titanic.full[is.na(titanic.full$Age), "Age"] <- age.median
# Clean missing values of fare
# Fare medians are commented to improve the accurcy of the linear regression model
# fare.median <- median(titanic.full$Fare, na.rm = TRUE)
# titanic.full[is.na(titanic.full$Fare), "Fare"] <- fare.median
boxplot(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)$stats
upper.whisker <- boxplot.stats(titanic.full$Fare)$stats[5]
outlier.filter <- titanic.full$Fare < upper.whisker
# Linear Regression Model to improve the accuracy.
fare.eqation = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model <- lm(formula = fare.eqation, data = titanic.full[outlier.filter,])
titanic.full$Fare
data1 <- is.na(titanic.full$Fare)
fare.row <- titanic.full[c("Pclass", "Sex", "Age", " SibSp", "Parch", "Embarked")]
